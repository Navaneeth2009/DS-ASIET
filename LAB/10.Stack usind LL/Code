// C program to implement a stack using singly linked list
#include &lt;limits.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
// Struct representing a node in the linked list
typedef struct Node {
int data;
struct Node* next;
} Node;
Node* createNode(int new_data) {
Node* new_node = (Node*)malloc(sizeof(Node));
new_node-&gt;data = new_data;
new_node-&gt;next = NULL;
return new_node;
}
// Struct to implement stack using a singly linked list
typedef struct Stack {
Node* head;
} Stack;
// Constructor to initialize the stack
void initializeStack(Stack* stack) { stack-&gt;head = NULL; }
// Function to check if the stack is empty
int isEmpty(Stack* stack) {
// If head is NULL, the stack is empty
return stack-&gt;head == NULL;
}
// Function to push an element onto the stack
void push(Stack* stack, int new_data) {
// Create a new node with given data
Node* new_node = createNode(new_data);
// Check if memory allocation for the new node failed
if (!new_node) {
printf(&quot;\nStack Overflow&quot;);
return;
}
// Link the new node to the current top node
new_node-&gt;next = stack-&gt;head;
// Update the top to the new node
stack-&gt;head = new_node;

}
// Function to remove the top element from the stack
void pop(Stack* stack) {
// Check for stack underflow
if (isEmpty(stack)) {
printf(&quot;\nStack Underflow\n&quot;);
return;
}
else {
// Assign the current top to a temporary variable
Node* temp = stack-&gt;head;
// Update the top to the next node
stack-&gt;head = stack-&gt;head-&gt;next;
// Deallocate the memory of the old top node
free(temp);
}
}
// Function to return the top element of the stack
int peek(Stack* stack) {
// If stack is not empty, return the top element
if (!isEmpty(stack))
return stack-&gt;head-&gt;data;
else {
printf(&quot;\nStack is empty&quot;);
return INT_MIN;
}
}
// Driver program to test the stack implementation
int main() {
// Creating a stack
Stack stack;
initializeStack(&amp;stack);
// Push elements onto the stack
push(&amp;stack, 11);
push(&amp;stack, 22);
push(&amp;stack, 33);
push(&amp;stack, 44);
// Print top element of the stack
printf(&quot;Top element is %d\n&quot;, peek(&amp;stack));

// removing two elemements from the top
printf(&quot;Removing two elements...\n&quot;);
pop(&amp;stack);
pop(&amp;stack);
// Print top element of the stack
printf(&quot;Top element is %d\n&quot;, peek(&amp;stack));
return 0;
}
